//leetcode
class Solution {
    public int[] searchRange(int[] arr, int x) {
        int n=arr.length;
        if(n == 0)
        {
            return new int[]{-1,-1};
        }
        return new int[]{first(arr,n,x),last(arr,n,x)};
    }
    private int first(int[] arr,int n,int x)
    {
        int ans = -1;
        int low=0,high=n-1;
        while(low <= high)
        {
            int mid = low +(high-low)/2;
            if(arr[mid] > x)
            {
               // ans = mid;
                high = mid - 1;   
            }
            else if(arr[mid] == x)
            {
                ans = mid;
                high = mid-1;
            }
            else
            {
                low = mid+1;
            }
        }
        return ans;
    }
    private int last(int[] arr,int n,int x)
    {
        int ans = -1;
        int low=0,high=n-1;
        while(low <= high)
        {
            int mid = low +(high-low)/2;
            if(arr[mid] < x)
            {
                
                low = mid+1;
                   
            }
            else if(arr[mid] == x)
            {
                ans = mid;
                low = mid + 1;
            }
            else
            {
                high = mid-1;
            }
        }
        return ans;
    }
}
